##Creating By Pr1me_StRel0k##

import asyncio
import logging
import sqlite3
import random
import re
import os
import json
import hashlib
import hmac
import dropbox
from dropbox.exceptions import AuthError
from dropbox.files import WriteMode
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Any
import aiosqlite
import aiohttp
from html import escape
from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton, BotCommand, BotCommandScopeChat
)
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
from aiogram.filters import Command, CommandStart
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage


CONFIG = {
    
    "BOT_TOKEN": "YOUR BOT TOKEN", 

    
    "ADMIN_ID": 0, 

    
    "CRYPTOBOT_API_TOKEN": "YOUR_CRYPTOBOT_TOKEN_HERE",  
    "CRYPTOBOT_API_URL": "https://pay.crypt.bot/api",

    
    "SUPPORTED_CURRENCIES": ["USDT", "TON", "BTC"], 

    
    "DB_PATH": "betting_bot.db",

    "DROPBOX_REFRESH_TOKEN": "YOUR REFRESH TOKEN",
    "DROPBOX_APP_KEY": "YOUR APP KEY",
    "DROPBOX_APP_SECRET": "YOUR SECRET APP KEY",
    "DB_BACKUP_PATH_DROPBOX": "/backups/betting_bot.db", 
    "PROMO_CODES_FILE_PATH": "/promocodes/promos.txt", 

    
    "WEBHOOK_ENABLED": False,
    "WEBHOOK_PORT": 8080,
    "WEBHOOK_PATH": "/webhook",

    
    "BET_TIMEOUT_MINUTES": 30,
    "MIN_BET_AMOUNT": 1.0,
    "MAX_BET_AMOUNT": 1000.0,
    "WITHDRAWAL_FEE": 0.06,  
    "MIN_WITHDRAWAL_AMOUNT": 10.0,

    "HAPPY_HOUR_ENABLED": True,
    "HAPPY_HOUR_START": 19,  
    "HAPPY_HOUR_END": 22,    
    "HAPPY_HOUR_MULTIPLIER": 1.10, 

    
    "DEBUG": False
}


logging.basicConfig(
    level=logging.INFO if not CONFIG["DEBUG"] else logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


bot = Bot(token=CONFIG["BOT_TOKEN"])
dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)

def is_happy_hour() -> Tuple[bool, Optional[float]]:
    
    if not CONFIG["HAPPY_HOUR_ENABLED"]:
        return False, None
    
    now = datetime.now()
    start_hour = CONFIG["HAPPY_HOUR_START"]
    end_hour = CONFIG["HAPPY_HOUR_END"]
    
    if start_hour <= now.hour < end_hour:
        return True, CONFIG["HAPPY_HOUR_MULTIPLIER"]
    return False, None


class BetCreation(StatesGroup):
    choosing_game = State()
    choosing_amount = State()

class WithdrawalStates(StatesGroup):
    entering_details = State()

class BetStates(StatesGroup):
    entering_custom_bet_amount = State()



class DepositStates(StatesGroup):
    choosing_currency = State()
    choosing_amount = State()
    entering_custom_amount = State()


class SupportStates(StatesGroup):
    writing_ticket = State()

class PromoStates(StatesGroup):
    entering_code = State()


class PVE_BetCreation(StatesGroup):
    choosing_game = State()
    choosing_amount = State()
    entering_custom_amount = State()
    
class AdminStates(StatesGroup):
    entering_user_id_for_info = State()
    entering_user_id_for_freeze = State()
    entering_user_id_for_zero = State()
    entering_user_id_for_unfreeze = State()
    entering_withdrawal_id_for_approve = State()
    entering_withdrawal_id_for_reject = State()
    entering_ticket_id_for_reply = State()
    writing_reply_to_ticket = State()



active_bets: Dict[str, dict] = {}  
user_bets: Dict[int, str] = {}  


SLOT_ITEMS = ["üçí", "üçã", "üçä", "üçâ", "‚≠ê", "üíé", "7Ô∏è‚É£"]
SLOT_PAYOUTS = {
    ("üçí", "üçí", "üçí"): 5,
    ("üçã", "üçã", "üçã"): 10,
    ("üçä", "üçä", "üçä"): 15,
    ("üçâ", "üçâ", "üçâ"): 20,
    ("‚≠ê", "‚≠ê", "‚≠ê"): 50,
    ("üíé", "üíé", "üíé"): 100,
    ("7Ô∏è‚É£", "7Ô∏è‚É£", "7Ô∏è‚É£"): 250,
}


class CryptoBotAPI:
    def __init__(self, token: str = None):
        self.token = token or CONFIG["CRYPTOBOT_API_TOKEN"]
        self.base_url = CONFIG["CRYPTOBOT_API_URL"]

        if not self.token or self.token == "YOUR_CRYPTOBOT_TOKEN_HERE":
            logger.warning("‚ö†Ô∏è CryptoBot API token –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º.")
            self.test_mode = True
        else:
            self.test_mode = False

    
    async def create_invoice(self, amount: float, asset: str, description: str = "", user_id: int = None) -> Dict[str, Any]:
        if self.test_mode:
            invoice_id = f"test_invoice_{user_id}_{int(datetime.now().timestamp())}"
            return {
                "ok": True,
                "result": {
                    "invoice_id": invoice_id,
                    "bot_invoice_url": f"https://t.me/CryptoBot?start={invoice_id}",
                    "amount": amount,
                    "asset": asset,
                    "status": "active",
                    "created_at": datetime.now().isoformat()
                }
            }

        headers = {"Crypto-Pay-API-Token": self.token}
        data = {
            "asset": asset,
            "amount": str(amount),
            "description": description or f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
        }

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.base_url}/createInvoice",
                    headers=headers,
                    json=data
                ) as response:
                    return await response.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞: {e}")
            return None

    async def check_invoice(self, invoice_id: str) -> Dict[str, Any]:
        if self.test_mode:
            return {
                "ok": True,
                "result": {
                    "items": [{
                        "invoice_id": invoice_id,
                        "status": "paid",
                        "amount": "10.0",
                        "asset": "USDT",
                        "paid_at": datetime.now().isoformat()
                    }]
                }
            }

        headers = {"Crypto-Pay-API-Token": self.token}
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"{self.base_url}/getInvoices",
                    headers=headers,
                    params={"invoice_ids": invoice_id}
                ) as response:
                    return await response.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–Ω–≤–æ–π—Å–∞: {e}")
            return None


crypto_api = CryptoBotAPI()


async def init_db():
    async with aiosqlite.connect(CONFIG["DB_PATH"]) as db:

        await db.execute("PRAGMA journal_mode=WAL;")

        try:
            await db.execute("ALTER TABLE users ADD COLUMN last_wheel_spin TEXT")
        except sqlite3.OperationalError: pass
        
        try:
            await db.execute("ALTER TABLE users ADD COLUMN referrer_id INTEGER")
        except sqlite3.OperationalError: pass
        try:
            await db.execute("ALTER TABLE users ADD COLUMN last_bonus_claim TEXT")
        except sqlite3.OperationalError: pass
        
        try:
            await db.execute("ALTER TABLE users ADD COLUMN games_played_as_referral INTEGER DEFAULT 0")
        except sqlite3.OperationalError: pass
        try:
            await db.execute("ALTER TABLE users ADD COLUMN first_deposit_bonus_received INTEGER DEFAULT 0")
        except sqlite3.OperationalError: pass
        
        await db.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                nickname TEXT,
                registration_date TEXT,
                total_wins INTEGER DEFAULT 0,
                total_bets INTEGER DEFAULT 0,
                total_won_amount REAL DEFAULT 0.0,
                last_activity TEXT,
                referrer_id INTEGER,
                last_bonus_claim TEXT,
                games_played_as_referral INTEGER DEFAULT 0,
                first_deposit_bonus_received INTEGER DEFAULT 0 -- 0 for false, 1 for true
            )
        ''')
        
        await db.execute('''
            CREATE TABLE IF NOT EXISTS user_balances (
                user_id INTEGER PRIMARY KEY,
                balance REAL DEFAULT 0.0,
                frozen_balance REAL DEFAULT 0.0,
                total_deposited REAL DEFAULT 0.0,
                total_withdrawn REAL DEFAULT 0.0,
                last_updated TEXT,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        ''')
        await db.execute('''
            CREATE TABLE IF NOT EXISTS transactions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                transaction_type TEXT,
                amount REAL,
                status TEXT,
                external_id TEXT,
                description TEXT,
                created_at TEXT,
                completed_at TEXT,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        ''')
        await db.execute('''
            CREATE TABLE IF NOT EXISTS withdrawal_requests (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                amount REAL,
                fee REAL,
                address TEXT,
                status TEXT DEFAULT 'pending',
                created_at TEXT,
                processed_at TEXT,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        ''')

        await db.execute('''
            CREATE TABLE IF NOT EXISTS promo_codes (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                code TEXT UNIQUE NOT NULL,
                type TEXT NOT NULL, -- 'balance', 'wallet' (deposit bonus)
                value REAL NOT NULL,
                max_uses INTEGER DEFAULT 1,
                uses INTEGER DEFAULT 0
            )
        ''')
        await db.execute('''
            CREATE TABLE IF NOT EXISTS used_promo_codes (
                user_id INTEGER,
                promo_id INTEGER,
                PRIMARY KEY (user_id, promo_id),
                FOREIGN KEY (promo_id) REFERENCES promo_codes (id)
            )
        ''')
        await db.execute('''
            CREATE TABLE IF NOT EXISTS tickets (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                username TEXT,
                message TEXT,
                status TEXT DEFAULT 'open',
                created_at TEXT,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        ''')
        await db.commit()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

async def process_referral_bonus_for_player(player_id: int, bet_amount: float):
    try:
        async with aiosqlite.connect(CONFIG["DB_PATH"]) as db:
            async with db.execute("SELECT referrer_id, games_played_as_referral FROM users WHERE user_id = ?", (player_id,)) as cursor:
                result = await cursor.fetchone()
            
            if not result: return
            
            referrer_id, games_played = result
            
            if referrer_id and games_played < 20:
                bonus = bet_amount * 0.10
                await update_user_balance(referrer_id, bonus, "referral_bonus")
                
                
                await db.execute("UPDATE users SET games_played_as_referral = games_played_as_referral + 1 WHERE user_id = ?", (player_id,))
                await db.commit()
                
                
                try:
                    player_info = await bot.get_chat(player_id)
                    player_username = player_info.username or '–∏–≥—Ä–æ–∫–∞'
                    await bot.send_message(
                        referrer_id,
                        f"üí∞ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª @{player_username} —Å—ã–≥—Ä–∞–ª –∏–≥—Ä—É! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å: {bonus:.2f} USDT."
                    )
                except Exception:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ {referrer_id} –æ –±–æ–Ω—É—Å–µ.")
                
                logger.info(f"–ù–∞—á–∏—Å–ª–µ–Ω —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å {bonus:.2f} USDT –¥–ª—è {referrer_id} –æ—Ç –∏–≥—Ä–æ–∫–∞ {player_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞ {player_id}: {e}")

async def register_user(user_id: int, username: str = None, nickname: str = None, referrer_id: int = None) -> bool:
    try:
        async with aiosqlite.connect(CONFIG["DB_PATH"]) as db:
            async with db.execute("SELECT user_id FROM users WHERE user_id = ?", (user_id,)) as cursor:
                if await cursor.fetchone():
                    return False
            
            await db.execute(
                "INSERT INTO users (user_id, username, nickname, registration_date, last_activity, referrer_id) VALUES (?, ?, ?, ?, ?, ?)",
                (user_id, username, nickname, datetime.now().isoformat(), datetime.now().isoformat(), referrer_id)
            )
            await db.execute(
                "INSERT INTO user_balances (user_id, last_updated) VALUES (?, ?)",
                (user_id, datetime.now().isoformat())
            )
            await db.commit()
            return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False

async def is_user_registered(user_id: int) -> bool:
    async with aiosqlite.connect(CONFIG["DB_PATH"]) as db:
        async with db.execute("SELECT user_id FROM users WHERE user_id = ?", (user_id,)) as cursor:
            return await cursor.fetchone() is not None

async def get_user_stats(user_id: int) -> Optional[dict]:
    async with aiosqlite.connect(CONFIG["DB_PATH"]) as db:
        async with db.execute('''
            SELECT u.*, b.balance, b.frozen_balance, b.total_deposited, b.total_withdrawn
            FROM users u LEFT JOIN user_balances b ON u.user_id = b.user_id
            WHERE u.user_id = ?
        ''', (user_id,)) as cursor:
            row = await cursor.fetchone()
            if row:
                return {
                    'user_id': row[0], 'username': row[1], 'nickname': row[2], 'registration_date': row[3],
                    'total_wins': row[4], 'total_bets': row[5], 'total_won_amount': row[6], 'last_activity': row[7],
                    'balance': row[8] or 0.0, 'frozen_balance': row[9] or 0.0,
                    'total_deposited': row[10] or 0.0, 'total_withdrawn': row[11] or 0.0
                }
            return None

async def get_user_balance(user_id: int) -> Dict[str, float]:
    async with aiosqlite.connect(CONFIG["DB_PATH"]) as db:
        async with db.execute("SELECT balance, frozen_balance FROM user_balances WHERE user_id = ?", (user_id,)) as cursor:
            row = await cursor.fetchone()
            if row:
                balance, frozen = row
                return {'balance': balance or 0.0, 'frozen': frozen or 0.0, 'available': (balance or 0.0) - (frozen or 0.0)}
            return {'balance': 0.0, 'frozen': 0.0, 'available': 0.0}

async def update_user_balance(user_id: int, amount: float, transaction_type: str = "manual") -> bool:
    try:
        async with aiosqlite.connect(CONFIG["DB_PATH"]) as db:
            await db.execute(
                "UPDATE user_balances SET balance = balance + ?, last_updated = ? WHERE user_id = ?",
                (amount, datetime.now().isoformat(), user_id)
            )
            await db.execute(
                "INSERT INTO transactions (user_id, transaction_type, amount, status, description, created_at) VALUES (?, ?, ?, 'completed', ?, ?)",
                (user_id, transaction_type, amount, f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞: {transaction_type}", datetime.now().isoformat())
            )
            await db.commit()
            return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ {user_id}: {e}")
        return False

async def freeze_balance(user_id: int, amount: float) -> bool:
    try:
        async with aiosqlite.connect(CONFIG["DB_PATH"]) as db:
            balance_info = await get_user_balance(user_id)
            if balance_info['available'] < amount:
                return False
            await db.execute(
                "UPDATE user_balances SET frozen_balance = frozen_balance + ?, last_updated = ? WHERE user_id = ?",
                (amount, datetime.now().isoformat(), user_id)
            )
            await db.commit()
            return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–º–æ—Ä–æ–∑–∫–∏ –±–∞–ª–∞–Ω—Å–∞ {user_id}: {e}")
        return False

async def unfreeze_balance(user_id: int, amount: float) -> bool:
    try:
        async with aiosqlite.connect(CONFIG["DB_PATH"]) as db:
            await db.execute(
                "UPDATE user_balances SET frozen_balance = MAX(0, frozen_balance - ?), last_updated = ? WHERE user_id = ?",
                (amount, datetime.now().isoformat(), user_id)
            )
            await db.commit()
            return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–º–æ—Ä–æ–∑–∫–∏ –±–∞–ª–∞–Ω—Å–∞ {user_id}: {e}")
        return False


def determine_pve_winner_with_chance(win_chance: float = 0.005) -> bool:

    return random.random() < win_chance

def determine_winner(game_type: str, player1_result: any, player2_result: any) -> int:
    if player1_result > player2_result:
        return 1
    elif player2_result > player1_result:
        return 2
    else:
        return 0

def convert_dice_to_game_result(game_type: str, dice_value: int):
    if game_type in ["football", "basketball"]:
        return dice_value >= 4  
    if game_type == "coinflip":
        return dice_value > 3 
    return dice_value


def get_main_menu_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard= [
        [InlineKeyboardButton(text="üìä –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton(text="üé≤ –°–æ–∑–¥–∞—Ç—å —Å—Ç–∞–≤–∫—É", callback_data="create_bet")],
        [InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="deposit"),
         InlineKeyboardButton(text="üí∏ –í—ã–≤–µ—Å—Ç–∏", callback_data="withdraw")],
        [InlineKeyboardButton(text="üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å", callback_data="daily_bonus"),
         InlineKeyboardButton(text="üé° –ö–æ–ª–µ—Å–æ –£–¥–∞—á–∏", callback_data="spin_wheel")],
        [InlineKeyboardButton(text="ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞", callback_data="referral_link"),
         InlineKeyboardButton(text="üéü –ü—Ä–æ–º–æ–∫–æ–¥", callback_data="enter_promo")],
        [InlineKeyboardButton(text="üì® –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
        [InlineKeyboardButton(text="üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="help")]
    ])

def get_admin_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üé´ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∏–∫–µ—Ç—ã", callback_data="admin_view_tickets")],
        [InlineKeyboardButton(text="üìù –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–∏–∫–µ—Ç", callback_data="admin_reply_ticket")],
        [InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –≤—ã–≤–æ–¥", callback_data="admin_approve_withdrawal"),
         InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—ã–≤–æ–¥", callback_data="admin_reject_withdrawal")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ", callback_data="admin_user_info")],
        [InlineKeyboardButton(text="ü•∂ –ó–∞–º–æ—Ä–æ–∑–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="admin_freeze_user"),
         InlineKeyboardButton(text="üîì –†–∞–∑–º–æ—Ä–æ–∑–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="admin_unfreeze_user")],
        [InlineKeyboardButton(text="üî• –û–±–Ω—É–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="admin_zero_user")],
    ])

def get_game_selection_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé≤ –ö–æ—Å—Ç–∏", callback_data="game_dice"),
         InlineKeyboardButton(text="ü™ô –û—Ä–µ–ª –∏ –†–µ—à–∫–∞", callback_data="game_coinflip")],
        [InlineKeyboardButton(text="‚öΩ –§—É—Ç–±–æ–ª", callback_data="game_football"),
         InlineKeyboardButton(text="üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª", callback_data="game_basketball")],
        [InlineKeyboardButton(text="üéØ –î–∞—Ä—Ç—Å", callback_data="game_darts")],
        [InlineKeyboardButton(text="ü§ñ –ò–≥—Ä–∞—Ç—å —Å –±–æ—Ç–æ–º (PvE)", callback_data="pve_menu")], 
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])

def get_bet_amount_keyboard(is_pve: bool = False) -> InlineKeyboardMarkup:
    back_callback = "pve_menu" if is_pve else "back_to_games"
    
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∞ 1 USDT", callback_data="amount_1"),
         InlineKeyboardButton(text="üí∞ 5 USDT", callback_data="amount_5")],
        [InlineKeyboardButton(text="üí∞ 10 USDT", callback_data="amount_10"),
         InlineKeyboardButton(text="üí∞ 25 USDT", callback_data="amount_25")],
        [InlineKeyboardButton(text="üí∞ 50 USDT", callback_data="amount_50"),
         InlineKeyboardButton(text="üí∞ 100 USDT", callback_data="amount_100")],
        [InlineKeyboardButton(text="‚úèÔ∏è –°–≤–æ—è —Å—É–º–º–∞", callback_data="custom_bet_amount")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=back_callback)]
    ])


def get_deposit_amount_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∞ 10 USDT", callback_data="deposit_10"),
         InlineKeyboardButton(text="üí∞ 25 USDT", callback_data="deposit_25")],
        [InlineKeyboardButton(text="üí∞ 50 USDT", callback_data="deposit_50"),
         InlineKeyboardButton(text="üí∞ 100 USDT", callback_data="deposit_100")],
        [InlineKeyboardButton(text="‚úèÔ∏è –°–≤–æ—è —Å—É–º–º–∞", callback_data="custom_deposit_amount")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="deposit")] 
    ])


def get_deposit_currency_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        InlineKeyboardButton(text=f"üí≥ {currency}", callback_data=f"currency_{currency}")
        for currency in CONFIG["SUPPORTED_CURRENCIES"]
    ]
    keyboard_layout = [buttons[i:i + 2] for i in range(0, len(buttons), 2)]
    keyboard_layout.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard_layout)


@router.message(CommandStart())
async def start_command(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    
    args = message.text.split()
    referrer_id = None
    if len(args) > 1 and args[1].startswith('ref_'):
        try:
            potential_referrer_id = int(args[1].split('_')[1])
            if potential_referrer_id != user_id: 
                if await is_user_registered(potential_referrer_id):
                     referrer_id = potential_referrer_id
                     logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∏—à–µ–ª –ø–æ —Å—Å—ã–ª–∫–µ –æ—Ç {referrer_id}")
        except (ValueError, IndexError):
            pass 

    
    if not await is_user_registered(user_id):
        await register_user(user_id, username, first_name, referrer_id)
        welcome_text = f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {first_name}!\n\n–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã."
        if referrer_id:
            try:
                await bot.send_message(referrer_id, f"üéâ –ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username or first_name}!")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ {referrer_id}: {e}")
            

    else:
        welcome_text = f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {first_name}!"

        happy_hour_active, multiplier = is_happy_hour()
        if happy_hour_active:
            bonus_percent = int((multiplier - 1) * 100)
            welcome_text += f"\n\nüéâ **–°–µ–π—á–∞—Å Happy Hour! –í—Å–µ –≤—ã–∏–≥—Ä—ã—à–∏ +{bonus_percent}%!**"

    welcome_text += "\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:"
    await message.answer(welcome_text, reply_markup=get_main_menu_keyboard(), parse_mode="Markdown")
    
@router.message(Command("bet"))
async def bet_command(message: Message):
    user_id = message.from_user.id
    chat_type = message.chat.type

    if not await is_user_registered(user_id):
        await message.reply("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –±–æ—Ç—É –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.")
        return

    if chat_type == "private":
        await message.reply(
            "üéÆ –ö–æ–º–∞–Ω–¥–∞ /bet –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –≥—Ä—É–ø–ø–∞—Ö!\n\n"
            "üí° –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "‚Ä¢ `/bet <—Å—É–º–º–∞> <–∏–≥—Ä–∞>`\n"
            "‚Ä¢ `/bet <—Å—É–º–º–∞> <–∏–≥—Ä–∞> @username`\n\n"
            "üéØ –ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ `/bet 10 dice`\n"
            "‚Ä¢ `/bet 25 football @player`",
            reply_markup=get_main_menu_keyboard()
        )
        return

    args = message.text.split()[1:]
    if len(args) < 2:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n"
            "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: `/bet <—Å—É–º–º–∞> <–∏–≥—Ä–∞> (@username)`\n"
            "üéÆ –ò–≥—Ä—ã: dice, football, basketball, darts"
        )
        return

    try:
        amount = float(args[0])
        game_type = args[1].lower()
        target_user = args[2] if len(args) > 2 else None

        valid_games = ["dice", "football", "basketball", "darts"]
        if game_type not in valid_games:
            await message.reply(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞: {game_type}. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(valid_games)}")
            return

        if not (CONFIG['MIN_BET_AMOUNT'] <= amount <= CONFIG['MAX_BET_AMOUNT']):
            await message.reply(f"‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–∂–¥—É {CONFIG['MIN_BET_AMOUNT']:.1f} –∏ {CONFIG['MAX_BET_AMOUNT']:.1f} USDT.")
            return

        balance_info = await get_user_balance(user_id)
        if balance_info['available'] < amount:
            await message.reply(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –î–æ—Å—Ç—É–ø–Ω–æ: {balance_info['available']:.2f} USDT.",
            )
            return

        if not await freeze_balance(user_id, amount):
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –∑–∞–º–æ—Ä–æ–∑–∫–∏ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        bet_id = f"bet_{user_id}_{int(datetime.now().timestamp())}"
        target_username = target_user.lstrip('@').lower() if target_user else None

        active_bets[bet_id] = {
            "id": bet_id, "creator_id": user_id, "creator_username": message.from_user.username,
            "creator_name": message.from_user.first_name, "game_type": game_type, "amount": amount,
            "status": "waiting", "created_at": datetime.now(), "chat_id": message.chat.id,
            "target_username": target_username, "acceptor_id": None
        }
        user_bets[user_id] = bet_id

        game_names = {"dice": "üé≤ –ö–æ—Å—Ç–∏", "football": "‚öΩ –§—É—Ç–±–æ–ª", "basketball": "üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª", "darts": "üéØ –î–∞—Ä—Ç—Å"}
        bet_text = (
            f"üéÆ –°–æ–∑–¥–∞–Ω–∞ —Å—Ç–∞–≤–∫–∞!\n\n"
            f"üéØ –ò–≥—Ä–∞: {game_names[game_type]}\n"
            f"üí∞ –°—Ç–∞–≤–∫–∞: {amount} USDT\n"
            f"üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: @{message.from_user.username}\n"
        )
        if target_username:
            bet_text += f"üéØ –î–ª—è –∏–≥—Ä–æ–∫–∞: @{target_username}\n"
        else:
            bet_text += f"üåç –û—Ç–∫—Ä—ã—Ç–∞—è —Å—Ç–∞–≤–∫–∞\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å —Å—Ç–∞–≤–∫—É", callback_data=f"accept_{bet_id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É", callback_data=f"cancel_{bet_id}")]
        ])
        
        await message.reply(bet_text, reply_markup=keyboard)
        asyncio.create_task(auto_cancel_bet(bet_id))

    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /bet: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

@router.callback_query(F.data == "profile")
async def profile_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    if not await is_user_registered(user_id):
        await callback.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return

    stats = await get_user_stats(user_id)
    balance_info = await get_user_balance(user_id)

    profile_text = (
        f"üìä –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n"
        f"üë§ –ò–º—è: {stats['nickname']}\n"
        f"üÜî Username: @{stats['username'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance_info['balance']:.2f} USDT\n"
        f"üîí –ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ: {balance_info['frozen']:.2f} USDT\n"
        f"üíµ –î–æ—Å—Ç—É–ø–Ω–æ: {balance_info['available']:.2f} USDT\n\n"
        f"üèÜ –ü–æ–±–µ–¥: {stats['total_wins']} / {stats['total_bets']} —Å—Ç–∞–≤–æ–∫\n"
        f"üíé –í—Å–µ–≥–æ –≤—ã–∏–≥—Ä–∞–Ω–æ: {stats['total_won_amount']:.2f} USDT\n"
    )
    if stats['total_bets'] > 0:
        winrate = (stats['total_wins'] / stats['total_bets']) * 100
        profile_text += f"üìà –í–∏–Ω—Ä–µ–π—Ç: {winrate:.1f}%"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="deposit"),
         InlineKeyboardButton(text="üí∏ –í—ã–≤–µ—Å—Ç–∏", callback_data="withdraw")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])
    await callback.message.edit_text(profile_text, reply_markup=keyboard)



@router.callback_query(F.data == "create_bet")
async def create_bet_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(BetCreation.choosing_game)
    await callback.message.edit_text(
        "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–≥—Ä—ã:",
        reply_markup=get_game_selection_keyboard()
    )

@router.callback_query(BetCreation.choosing_game, F.data.startswith("game_"))
async def game_selection_handler(callback: CallbackQuery, state: FSMContext):
    game_type = callback.data.split("_")[1]
    await state.update_data(game_type=game_type)
    await state.set_state(BetCreation.choosing_amount)

    game_names = {
        "dice": "üé≤ –ö–æ—Å—Ç–∏", "football": "‚öΩ –§—É—Ç–±–æ–ª",
        "basketball": "üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª", "darts": "üéØ –î–∞—Ä—Ç—Å", "coinflip": "ü™ô –û—Ä–µ–ª –∏ –†–µ—à–∫–∞"
    }

    await callback.message.edit_text(
        f"–í—ã–±—Ä–∞–Ω–∞ –∏–≥—Ä–∞: {game_names.get(game_type, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
        f"üí∞ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:",
        reply_markup=get_bet_amount_keyboard()
    )

@router.callback_query(BetCreation.choosing_amount, F.data.startswith("amount_"))
async def amount_selection_handler(callback: CallbackQuery, state: FSMContext):
    try:
        amount = float(callback.data.split("_")[1])
        user_id = callback.from_user.id

        if not await is_user_registered(user_id):
            await callback.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start", show_alert=True)
            return

        balance_info = await get_user_balance(user_id)
        if balance_info['available'] < amount:
            await callback.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –î–æ—Å—Ç—É–ø–Ω–æ: {balance_info['available']:.2f} USDT", show_alert=True)
            return

        fsm_data = await state.get_data()
        game_type = fsm_data.get("game_type")
        if not game_type:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –∏–≥—Ä–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
            await state.clear()
            await create_bet_handler(callback, state) 
            return

        if not await freeze_balance(user_id, amount):
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–º–æ—Ä–æ–∑–∫–∏ —Å—Ä–µ–¥—Å—Ç–≤", show_alert=True)
            return

        
        bet_id = f"bet_{user_id}_{int(datetime.now().timestamp())}"
        active_bets[bet_id] = {
            "id": bet_id, "creator_id": user_id, "creator_username": callback.from_user.username,
            "creator_name": callback.from_user.first_name, "game_type": game_type, "amount": amount,
            "status": "waiting", "created_at": datetime.now(), "chat_id": callback.message.chat.id,
            "target_username": None, "acceptor_id": None
        }
        user_bets[user_id] = bet_id

        game_names = {"dice": "üé≤ –ö–æ—Å—Ç–∏", "football": "‚öΩ –§—É—Ç–±–æ–ª", "basketball": "üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª", "darts": "üéØ –î–∞—Ä—Ç—Å", "coinflip": "ü™ô –û—Ä–µ–ª –∏ –†–µ—à–∫–∞"}
        bet_text = (
            f"üéÆ –°–æ–∑–¥–∞–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞—è —Å—Ç–∞–≤–∫–∞!\n\n"
            f"üéØ –ò–≥—Ä–∞: {game_names[game_type]}\n"
            f"üí∞ –°—Ç–∞–≤–∫–∞: {amount} USDT\n"
            f"üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: @{callback.from_user.username}\n"
            f"üí° –ß—Ç–æ–±—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –µ–º—É —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ."
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å —Å—Ç–∞–≤–∫—É", callback_data=f"accept_{bet_id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É", callback_data=f"cancel_{bet_id}")]
        ])
        
        await callback.message.edit_text(bet_text, reply_markup=keyboard)
        await state.clear() 
        asyncio.create_task(auto_cancel_bet(bet_id))

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ amount_selection_handler: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        await state.clear()



@router.callback_query(F.data == "pve_menu")
async def pve_menu_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(PVE_BetCreation.choosing_game)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé≤ –ö–æ—Å—Ç–∏", callback_data="pvegame_dice"),
         InlineKeyboardButton(text="ü™ô –û—Ä–µ–ª –∏ –†–µ—à–∫–∞", callback_data="pvegame_coinflip")],
        [InlineKeyboardButton(text="‚öΩ –§—É—Ç–±–æ–ª", callback_data="pvegame_football"),
         InlineKeyboardButton(text="üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª", callback_data="pvegame_basketball")],
        [InlineKeyboardButton(text="üéØ –î–∞—Ä—Ç—Å", callback_data="pvegame_darts"),
         InlineKeyboardButton(text="üé∞ –°–ª–æ—Ç—ã", callback_data="pvegame_slots")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])
    await callback.message.edit_text(
        "ü§ñ –ò–≥—Ä–∞ —Å –±–æ—Ç–æ–º\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–≥—Ä—ã:",
        reply_markup=keyboard
    )

@router.callback_query(PVE_BetCreation.choosing_game, F.data.startswith("pvegame_"))
async def pve_game_selection_handler(callback: CallbackQuery, state: FSMContext):
    game_type = callback.data.split("_")[1]
    await state.update_data(game_type=game_type)
    await state.set_state(PVE_BetCreation.choosing_amount)

    game_names = {
        "dice": "üé≤ –ö–æ—Å—Ç–∏", "football": "‚öΩ –§—É—Ç–±–æ–ª", "basketball": "üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª",
        "darts": "üéØ –î–∞—Ä—Ç—Å", "coinflip": "ü™ô –û—Ä–µ–ª –∏ –†–µ—à–∫–∞", "slots": "üé∞ –°–ª–æ—Ç—ã"
    }

    await callback.message.edit_text(
        f"ü§ñ –í—ã–±—Ä–∞–Ω–∞ –∏–≥—Ä–∞ —Å –±–æ—Ç–æ–º: {game_names.get(game_type, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
        f"üí∞ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:",
        reply_markup=get_bet_amount_keyboard(is_pve=True)
    )

@router.callback_query(PVE_BetCreation.choosing_amount, F.data.startswith("amount_"))
async def pve_amount_selection_handler(callback: CallbackQuery, state: FSMContext):
    try:
        amount = float(callback.data.split("_")[1])
        user_id = callback.from_user.id

        balance_info = await get_user_balance(user_id)
        if balance_info['available'] < amount:
            await callback.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –î–æ—Å—Ç—É–ø–Ω–æ: {balance_info['available']:.2f} USDT", show_alert=True)
            return

        fsm_data = await state.get_data()
        game_type = fsm_data.get("game_type")
        if not game_type:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –∏–≥—Ä–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
            await state.clear()
            return
        
        await callback.message.delete()
        await state.clear()
        
        if not await freeze_balance(user_id, amount):
            await bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–º–æ—Ä–æ–∑–∫–∏ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        
        
        if game_type == 'slots':
            await process_slots_game(user_id, amount, callback.from_user.username)
        else:
            await process_pve_game(user_id, game_type, amount, callback.from_user.username)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ pve_amount_selection_handler: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        await state.clear()



async def process_pve_game(user_id: int, game_type: str, amount: float, username: str):
    chat_id = user_id
    game_emojis = {"dice": "üé≤", "football": "‚öΩ", "basketball": "üèÄ", "darts": "üéØ", "coinflip": "üé≤"}
    emoji = game_emojis.get(game_type, "üé≤")

    try:
        await bot.send_message(chat_id, f"ü§ñ –ò–≥—Ä–∞ —Å –±–æ—Ç–æ–º –Ω–∞—á–∞–ª–∞—Å—å!\nüí∞ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {amount:.2f} USDT")
        await asyncio.sleep(1)

        await bot.send_message(chat_id, f"{emoji} –í–∞—à –±—Ä–æ—Å–æ–∫:")
        player_dice_msg = await bot.send_dice(chat_id, emoji=emoji)
        await asyncio.sleep(4)

        await bot.send_message(chat_id, f"{emoji} –ë—Ä–æ—Å–æ–∫ –±–æ—Ç–∞:")
        bot_dice_msg = await bot.send_dice(chat_id, emoji=emoji)
        await asyncio.sleep(4)

        player_dice_value = player_dice_msg.dice.value
        bot_dice_value = bot_dice_msg.dice.value
        
        player_wins = determine_pve_winner_with_chance()

        result_text = (
            f"–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–ì–†–´ –° –ë–û–¢–û–ú\n\n"
            f"üë§ @{username}: {player_dice_value}\n"
            f"ü§ñ –ë–æ—Ç: {bot_dice_value}\n\n"
        )
        
       
        await unfreeze_balance(user_id, amount)

        if player_wins:
            win_amount = amount  
            bonus_text = ""
            happy_hour_active, multiplier = is_happy_hour()

            if happy_hour_active:
                win_amount = round(amount * multiplier, 2)
                bonus_percent = int((multiplier - 1) * 100)
                bonus_text = f" (üéâ +{bonus_percent}% Happy Hour!)"
            
            result_text += f"üèÜ –í–´ –ü–û–ë–ï–î–ò–õ–ò! –í–∞—à –≤—ã–∏–≥—Ä—ã—à: {win_amount:.2f} USDT{bonus_text}"
            await update_user_balance(user_id, win_amount, "pve_win")
            await update_user_stats(user_id, won=True, amount=win_amount)
        else:
            result_text += f"üòî –í–´ –ü–†–û–ò–ì–†–ê–õ–ò! –ü–æ—Ç–µ—Ä—è: {amount:.2f} USDT"
            await update_user_balance(user_id, -amount, "pve_loss")
            await update_user_stats(user_id, won=False)
        
        await process_referral_bonus_for_player(user_id, amount)
        
        await bot.send_message(chat_id, result_text, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ï—â–µ —Ä–∞–∑!", callback_data="pve_menu")],
            [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]))

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ PvE –∏–≥—Ä—ã –¥–ª—è {user_id}: {e}")
        await unfreeze_balance(user_id, amount) 
        await bot.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã. –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞.")



async def process_weekly_cashback():
    CASHBACK_PERCENTAGE = 0.03  
    logger.info("–ù–∞—á–∏–Ω–∞—é –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∫—ç—à–±—ç–∫–∞...")
    
    try:
        async with aiosqlite.connect(CONFIG["DB_PATH"]) as db:
            async with db.execute("SELECT user_id FROM users") as cursor:
                users = await cursor.fetchall()

            for user_tuple in users:
                user_id = user_tuple[0]
                
              
                seven_days_ago = (datetime.now() - timedelta(days=7)).isoformat()
                async with db.execute(
                    """
                    SELECT SUM(amount) FROM transactions
                    WHERE user_id = ? AND created_at >= ? AND (transaction_type = 'bet_loss' OR transaction_type LIKE 'pve%loss')
                    """, (user_id, seven_days_ago)
                ) as loss_cursor:
                    total_loss_result = await loss_cursor.fetchone()
                
                total_loss = abs(total_loss_result[0]) if total_loss_result and total_loss_result[0] else 0
                
                if total_loss > 0:
                    cashback_amount = round(total_loss * CASHBACK_PERCENTAGE, 2)
                    if cashback_amount > 0.01: 
                        await update_user_balance(user_id, cashback_amount, "weekly_cashback")
                        logger.info(f"–ù–∞—á–∏—Å–ª–µ–Ω –∫—ç—à–±—ç–∫ {cashback_amount} USDT –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–ø—Ä–æ–∏–≥—Ä—ã—à {total_loss} USDT)")
                        try:
                            await bot.send_message(user_id, f"üí∏ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –∫—ç—à–±—ç–∫ –≤ —Ä–∞–∑–º–µ—Ä–µ {cashback_amount:.2f} USDT –∑–∞ –≤–∞—à–∏ –∏–≥—Ä—ã!")
                        except Exception as e:
                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ –∫—ç—à–±—ç–∫–µ: {e}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∫—ç—à–±—ç–∫–∞: {e}")

async def run_periodic_tasks():
    
    while True:
        now = datetime.now()
        
        days_until_monday = (7 - now.weekday()) % 7
        if days_until_monday == 0 and now.hour >= 12: 
            days_until_monday = 7 
            
        next_run_date = (now + timedelta(days=days_until_monday)).replace(hour=12, minute=0, second=0, microsecond=0)
        
        sleep_duration = (next_run_date - now).total_seconds()
        
        logger.info(f"–°–ª–µ–¥—É—é—â–∏–π —Ä–∞—Å—á–µ—Ç –∫—ç—à–±—ç–∫–∞ —á–µ—Ä–µ–∑ {sleep_duration / 3600:.2f} —á–∞—Å–æ–≤.")
        await asyncio.sleep(sleep_duration)
        await process_weekly_cashback()
        

async def process_slots_game(user_id: int, amount: float, username: str):
    chat_id = user_id
    try:
        msg = await bot.send_message(chat_id, f"üé∞ –°–ª–æ—Ç—ã! –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {amount:.2f} USDT\n–ö—Ä—É—Ç–∏–º –±–∞—Ä–∞–±–∞–Ω—ã...")
        await asyncio.sleep(1)

        for _ in range(3):
            reels = [random.choice(SLOT_ITEMS) for _ in range(3)]
            await msg.edit_text(f"üé∞ –°–ª–æ—Ç—ã! –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {amount:.2f} USDT\n\n{' '.join(reels)}")
            await asyncio.sleep(0.5)

        player_wins = determine_pve_winner_with_chance()
        
        await unfreeze_balance(user_id, amount)

        if player_wins:
            
            final_reels = random.choice(list(SLOT_PAYOUTS.keys()))
            payout_multiplier = SLOT_PAYOUTS[final_reels]
            win_amount = amount * (payout_multiplier -1) 

            happy_hour_active, multiplier = is_happy_hour()
            if happy_hour_active:
                win_amount = round(win_amount * multiplier, 2)

            bonus_text = f" (—Å —É—á–µ—Ç–æ–º –±–æ–Ω—É—Å–∞ Happy Hour!)" if happy_hour_active else ""
            result_text = (
                f"–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–ì–†–´ –í –°–õ–û–¢–´\n\n"
                f"<b>{' '.join(final_reels)}</b>\n\n"
                f"üéâ –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú, @{username}!\n"
                f"–í—ã–∏–≥—Ä—ã—à–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è! –í–∞—à —á–∏—Å—Ç—ã–π –≤—ã–∏–≥—Ä—ã—à: {win_amount:.2f} USDT (x{payout_multiplier}){bonus_text}"
            )
            await update_user_balance(user_id, win_amount, "pve_slots_win")
            await update_user_stats(user_id, won=True, amount=win_amount)
        else:
            
            while True:
                final_reels = tuple(random.choice(SLOT_ITEMS) for _ in range(3))
                if final_reels not in SLOT_PAYOUTS:
                    break
            
            result_text = (
                f"–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–ì–†–´ –í –°–õ–û–¢–´\n\n"
                f"<b>{' '.join(final_reels)}</b>\n\n"
                f"üòî –£–≤—ã, @{username}, –≤ —ç—Ç–æ—Ç —Ä–∞–∑ –Ω–µ –ø–æ–≤–µ–∑–ª–æ.\n"
                f"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏: {amount:.2f} USDT"
            )
            await update_user_balance(user_id, -amount, "pve_slots_loss")
            await update_user_stats(user_id, won=False)
            
        await msg.edit_text(result_text, parse_mode="HTML")

        await process_referral_bonus_for_player(user_id, amount)

        await bot.send_message(chat_id, "–°—ã–≥—Ä–∞–µ–º –µ—â–µ?", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üé∞ –ï—â–µ —Ä–∞–∑ –≤ —Å–ª–æ—Ç—ã!", callback_data="pvegame_slots")],
            [InlineKeyboardButton(text="üé≤ –î—Ä—É–≥–∞—è –∏–≥—Ä–∞", callback_data="pve_menu")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]))


    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–≥—Ä—ã –≤ —Å–ª–æ—Ç—ã –¥–ª—è {user_id}: {e}")
        await unfreeze_balance(user_id, amount)
        await bot.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã. –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞.")


@router.callback_query(PVE_BetCreation.choosing_amount, F.data == "custom_bet_amount")
async def pve_custom_bet_amount_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(PVE_BetCreation.entering_custom_amount)
    amount_text = (
        f"ü§ñ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º\n\n"
        f"–õ–∏–º–∏—Ç—ã: –æ—Ç {CONFIG['MIN_BET_AMOUNT']:.1f} –¥–æ {CONFIG['MAX_BET_AMOUNT']:.1f} USDT."
    )
    await callback.message.edit_text(amount_text, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="pve_menu")]
    ]))

def get_dropbox_client():
    try:
        return dropbox.Dropbox(
            oauth2_refresh_token=CONFIG["DROPBOX_REFRESH_TOKEN"],
            app_key=CONFIG["DROPBOX_APP_KEY"],
            app_secret=CONFIG["DROPBOX_APP_SECRET"]
        )
    except AuthError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Dropbox: {e}")
        return None

async def sync_promo_codes_from_dropbox():
    dbx = get_dropbox_client()
    if not dbx:
        return

    try:
        logger.info("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –∏–∑ Dropbox...")
        _, res = dbx.files_download(CONFIG["PROMO_CODES_FILE_PATH"])
        content = res.content.decode('utf-8')
        
        async with aiosqlite.connect(CONFIG["DB_PATH"]) as db:
            for line in content.splitlines():
                if not line.strip() or line.startswith('#'):
                    continue
                try:
                    code, promo_type, value, max_uses = line.strip().split()
                    await db.execute(
                        "INSERT INTO promo_codes (code, type, value, max_uses) VALUES (?, ?, ?, ?) ON CONFLICT(code) DO NOTHING",
                        (code.upper(), promo_type, float(value), int(max_uses))
                    )
                except ValueError:
                    logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {line}")
            await db.commit()
        logger.info("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        
    except dropbox.exceptions.ApiError as e:
        if isinstance(e.error, dropbox.files.DownloadError):
            logger.error(f"–§–∞–π–ª —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Dropbox: {CONFIG['PROMO_CODES_FILE_PATH']}")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ API Dropbox –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {e}")
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {e}")


async def backup_db_to_dropbox():
    dbx = get_dropbox_client()
    if not dbx:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø: –∫–ª–∏–µ–Ω—Ç Dropbox –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        return

    try:
        with open(CONFIG["DB_PATH"], 'rb') as f:
            db_content = f.read()

        
        await asyncio.to_thread(
            dbx.files_upload,
            db_content,
            CONFIG["DB_BACKUP_PATH_DROPBOX"],
            mode=WriteMode('overwrite')
        )
        
        logger.info(f"‚úÖ –ë—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Dropbox: {CONFIG['DB_BACKUP_PATH_DROPBOX']}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

async def run_periodic_backups():
    while True:
        await asyncio.sleep(3600 * 6)
        await backup_db_to_dropbox()


@router.message(PVE_BetCreation.entering_custom_amount)
async def pve_process_custom_bet_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text)
        if not (CONFIG['MIN_BET_AMOUNT'] <= amount <= CONFIG['MAX_BET_AMOUNT']):
            await message.reply(f"‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–∂–¥—É {CONFIG['MIN_BET_AMOUNT']:.1f} –∏ {CONFIG['MAX_BET_AMOUNT']:.1f} USDT.")
            return

        callback_data = f"amount_{amount}"
        fake_callback = CallbackQuery(
            id=str(message.message_id), from_user=message.from_user,
            chat_instance="-1", message=message, data=callback_data
        )
        
        parent_state_data = await state.get_data()
        await state.set_state(PVE_BetCreation.choosing_amount)
        await state.set_data(parent_state_data)
        
        await pve_amount_selection_handler(fake_callback, state)
        
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    except Exception as e:
        logger.error(f"Error in pve_process_custom_bet_amount: {e}")



async def auto_cancel_bet(bet_id: str):
    await asyncio.sleep(CONFIG["BET_TIMEOUT_MINUTES"] * 60)
    
    if bet_id in active_bets and active_bets[bet_id]["status"] == "waiting":
        bet_info = active_bets[bet_id]
        
        await unfreeze_balance(bet_info["creator_id"], bet_info["amount"])
        
        creator_id = bet_info["creator_id"]
        del active_bets[bet_id]
        if creator_id in user_bets and user_bets[creator_id] == bet_id:
            del user_bets[creator_id]
        
        logger.info(f"‚è∞ –°—Ç–∞–≤–∫–∞ {bet_id} –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É")
        try:
            await bot.send_message(creator_id, f"‚è∞ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –Ω–∞ {bet_info['amount']} USDT –±—ã–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –µ–µ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏–Ω—è–ª.")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –æ–± –æ—Ç–º–µ–Ω–µ —Å—Ç–∞–≤–∫–∏ {bet_id}: {e}")

@router.callback_query(F.data.startswith("accept_"))
async def accept_bet_handler(callback: CallbackQuery):
    bet_id = callback.data.split("_", 1)[1]
    user_id = callback.from_user.id
    
    if bet_id not in active_bets:
        await callback.answer("‚ùå –°—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", show_alert=True)
        return
    
    bet_info = active_bets[bet_id]
    
    if user_id == bet_info["creator_id"]:
        await callback.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Å—Ç–∞–≤–∫—É.", show_alert=True)
        return
    
    if not await is_user_registered(user_id):
        await callback.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –≤ –±–æ—Ç–µ.", show_alert=True)
        return
    
    if bet_info.get("target_username") and callback.from_user.username.lower() != bet_info["target_username"].lower():
        await callback.answer(f"‚ùå –°—Ç–∞–≤–∫–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è @{bet_info['target_username']}", show_alert=True)
        return
    
    balance_info = await get_user_balance(user_id)
    if balance_info['available'] < bet_info["amount"]:
        await callback.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ù—É–∂–Ω–æ: {bet_info['amount']:.2f} USDT.", show_alert=True)
        return
    
    if not await freeze_balance(user_id, bet_info["amount"]):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–º–æ—Ä–æ–∑–∫–∏ —Å—Ä–µ–¥—Å—Ç–≤.", show_alert=True)
        return
    
    bet_info.update({
        "acceptor_id": user_id,
        "acceptor_username": callback.from_user.username,
        "acceptor_name": callback.from_user.first_name,
        "status": "accepted"
    })
    user_bets[user_id] = bet_id
    
    await callback.answer("‚úÖ –°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É...", show_alert=False)
    await callback.message.delete() 
    await start_game(bet_id)

@router.callback_query(F.data.startswith("cancel_"))
async def cancel_bet_handler(callback: CallbackQuery):
    bet_id = callback.data.split("_", 1)[1]
    user_id = callback.from_user.id
    
    if bet_id not in active_bets:
        await callback.answer("‚ùå –°—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return
    
    bet_info = active_bets[bet_id]
    
    if user_id != bet_info["creator_id"]:
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É.", show_alert=True)
        return
    
    await unfreeze_balance(bet_info["creator_id"], bet_info["amount"])
    
    del active_bets[bet_id]
    if user_id in user_bets and user_bets[user_id] == bet_id:
        del user_bets[user_id]
    
    await callback.message.edit_text("‚ùå –°—Ç–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º.")

async def start_game(bet_id: str):
    if bet_id not in active_bets: return
    bet_info = active_bets[bet_id]
    bet_info["status"] = "playing"
    await play_game_round(bet_id)

async def play_game_round(bet_id: str):
    if bet_id not in active_bets: return
    bet_info = active_bets[bet_id]
    chat_id = bet_info.get("chat_id")

    game_names = {"dice": "üé≤", "football": "‚öΩ", "basketball": "üèÄ", "darts": "üéØ", "coinflip": "üé≤"}
    emoji = game_names.get(bet_info['game_type'], "üé≤")

    try:
        roll_text = (
            f"üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n\n"
            f"@{bet_info['creator_username']} vs @{bet_info['acceptor_username']}\n"
            f"üí∞ –°—Ç–∞–≤–∫–∞: {bet_info['amount']} USDT"
        )
        await bot.send_message(chat_id, roll_text)

        await bot.send_message(chat_id, f"{emoji} –ë—Ä–æ—Å–æ–∫ @{bet_info['creator_username']}:")
        creator_dice_msg = await bot.send_dice(chat_id, emoji=emoji)
        await asyncio.sleep(4)

        await bot.send_message(chat_id, f"{emoji} –ë—Ä–æ—Å–æ–∫ @{bet_info['acceptor_username']}:")
        acceptor_dice_msg = await bot.send_dice(chat_id, emoji=emoji)
        await asyncio.sleep(4)
        
        creator_dice_value = creator_dice_msg.dice.value
        acceptor_dice_value = acceptor_dice_msg.dice.value
        
        creator_result = convert_dice_to_game_result(bet_info["game_type"], creator_dice_value)
        acceptor_result = convert_dice_to_game_result(bet_info["game_type"], acceptor_dice_value)
        
        bet_info.update({
            "creator_dice": creator_dice_value, "acceptor_dice": acceptor_dice_value,
            "creator_result": creator_result, "acceptor_result": acceptor_result
        })
        
        winner = determine_winner(bet_info["game_type"], creator_result, acceptor_result)
        
        await send_game_results(bet_id, winner)
        await finish_game(bet_id, winner)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∏–≥—Ä–æ–≤–æ–º —Ä–∞—É–Ω–¥–µ {bet_id}: {e}")
        await unfreeze_balance(bet_info["creator_id"], bet_info["amount"])
        await unfreeze_balance(bet_info["acceptor_id"], bet_info["amount"])
        if bet_id in active_bets: del active_bets[bet_id]
        error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –∏–≥—Ä–µ. –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã."
        try:
            await bot.send_message(chat_id, f"{error_text}\nüë• @{bet_info['creator_username']} –∏ @{bet_info['acceptor_username']}")
        except:
            pass

async def send_game_results(bet_id: str, winner: int):
    bet_info = active_bets[bet_id]
    
    result_text = f"üéÆ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–ì–†–´\n\n"
    result_text += f"üë§ @{bet_info['creator_username']}: {bet_info['creator_dice']}\n"
    result_text += f"üë§ @{bet_info['acceptor_username']}: {bet_info['acceptor_dice']}\n\n"
    
    if winner == 0:
        result_text += f"ü§ù –ù–ò–ß–¨–Ø! –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –∏–≥—Ä–æ–∫–∞–º."
    elif winner == 1:
        result_text += f"üèÜ –ü–û–ë–ï–î–ò–¢–ï–õ–¨: @{bet_info['creator_username']} (+{bet_info['amount']:.2f} USDT)"
    else:
        result_text += f"üèÜ –ü–û–ë–ï–î–ò–¢–ï–õ–¨: @{bet_info['acceptor_username']} (+{bet_info['amount']:.2f} USDT)"
    
    chat_id = bet_info.get("chat_id")
    try:
        await bot.send_message(chat_id, result_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —á–∞—Ç {chat_id}: {e}")


async def finish_game(bet_id: str, winner: int):
    if bet_id not in active_bets: return
    
    bet_info = active_bets[bet_id]
    amount = bet_info["amount"]
    creator_id = bet_info["creator_id"]
    acceptor_id = bet_info["acceptor_id"]

    try:
        await process_referral_bonus_for_player(creator_id, amount)
        await process_referral_bonus_for_player(acceptor_id, amount)

        await unfreeze_balance(creator_id, amount)
        await unfreeze_balance(acceptor_id, amount)

        happy_hour_active, multiplier = is_happy_hour()
        win_amount = amount

        if happy_hour_active:
            win_amount = round(amount * multiplier, 2)
        
        if winner == 1:
            await update_user_balance(creator_id, win_amount, "bet_win_hh" if happy_hour_active else "bet_win")
            await update_user_balance(acceptor_id, -amount, "bet_loss")
            await update_user_stats(creator_id, won=True, amount=win_amount)
            await update_user_stats(acceptor_id, won=False)
        elif winner == 2:
            await update_user_balance(acceptor_id, win_amount, "bet_win_hh" if happy_hour_active else "bet_win")
            await update_user_balance(creator_id, -amount, "bet_loss")
            await update_user_stats(acceptor_id, won=True, amount=win_amount)
            await update_user_stats(creator_id, won=False)
        else: 
             await update_user_stats(creator_id, won=False)
             await update_user_stats(acceptor_id, won=False)
        
        if creator_id in user_bets: del user_bets[creator_id]
        if acceptor_id in user_bets: del user_bets[acceptor_id]
        del active_bets[bet_id]
        
        logger.info(f"‚úÖ –ò–≥—Ä–∞ {bet_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã {bet_id}: {e}")

async def update_user_stats(user_id: int, won: bool, amount: float = 0):
    try:
        async with aiosqlite.connect(CONFIG["DB_PATH"]) as db:
            if won:
                await db.execute(
                    "UPDATE users SET total_wins = total_wins + 1, total_bets = total_bets + 1, total_won_amount = total_won_amount + ?, last_activity = ? WHERE user_id = ?",
                    (amount, datetime.now().isoformat(), user_id)
                )
            else:
                await db.execute(
                    "UPDATE users SET total_bets = total_bets + 1, last_activity = ? WHERE user_id = ?",
                    (datetime.now().isoformat(), user_id)
                )
            await db.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ {user_id}: {e}")


@router.callback_query(F.data == "deposit")
async def deposit_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(DepositStates.choosing_currency)
    await callback.message.edit_text("üëá –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=get_deposit_currency_keyboard())


@router.callback_query(DepositStates.choosing_currency, F.data.startswith("currency_"))
async def choose_deposit_currency_handler(callback: CallbackQuery, state: FSMContext):
    currency = callback.data.split("_")[1]
    await state.update_data(deposit_currency=currency)
    await state.set_state(DepositStates.choosing_amount)
    await callback.message.edit_text(f"üí∞ –í—ã–±—Ä–∞–Ω–∞ –≤–∞–ª—é—Ç–∞: {currency}\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ USDT (–æ–Ω–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞).", reply_markup=get_deposit_amount_keyboard())


@router.callback_query(DepositStates.choosing_amount, F.data.startswith("deposit_"))
async def deposit_amount_handler(callback: CallbackQuery, state: FSMContext):
    amount = float(callback.data.split("_")[1])
    user_id = callback.from_user.id
    
    data = await state.get_data()
    asset = data.get("deposit_currency")

    if not asset:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –≤–∞–ª—é—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        await state.clear()
        return

   
    invoice_data = await crypto_api.create_invoice(amount=amount, asset=asset, user_id=user_id)
    
    if not invoice_data or not invoice_data.get("ok"):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞.", show_alert=True)
        return
    
    invoice = invoice_data["result"]
    invoice_id = invoice['invoice_id']

    try:
        async with aiosqlite.connect(CONFIG["DB_PATH"]) as db:
            await db.execute(
                "INSERT INTO transactions (user_id, transaction_type, amount, status, external_id, created_at) VALUES (?, ?, ?, ?, ?, ?)",
                (user_id, "deposit", amount, "pending", invoice_id, datetime.now().isoformat())
            )
            await db.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")

    deposit_text = f"üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\nüíµ –°—É–º–º–∞: {amount} USDT (–≤ {asset})\nüîó ID: {invoice_id}\n\n"
    
    if crypto_api.test_mode:
        deposit_text += f"‚ö†Ô∏è –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú\nüí° –ü–ª–∞—Ç–µ–∂ –±—É–¥–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥."
        asyncio.create_task(simulate_payment(invoice_id, user_id, amount))
    else:
        deposit_text += "üëÜ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ @CryptoBot."

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=invoice["bot_invoice_url"])],
        [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂", callback_data=f"check_{invoice_id}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])
    
    await callback.message.edit_text(deposit_text, reply_markup=keyboard)


@router.callback_query(F.data.startswith("check_"))
async def check_payment_handler(callback: CallbackQuery):
    invoice_id = callback.data.split("_", 1)[1]
    user_id = callback.from_user.id

    payment_data = await crypto_api.check_invoice(invoice_id)
    if not payment_data or not payment_data.get("ok") or not payment_data["result"]["items"]:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞.", show_alert=True)
        return

    payment = payment_data["result"]["items"][0]
    if payment["status"] == "paid":
        amount = float(payment["amount"])
        
        async with aiosqlite.connect(CONFIG["DB_PATH"]) as db:
            async with db.execute("SELECT status FROM transactions WHERE external_id = ?", (invoice_id,)) as cursor:
                transaction = await cursor.fetchone()
                if transaction and transaction[0] == 'completed':
                    await callback.answer("‚úÖ –≠—Ç–æ—Ç –ø–ª–∞—Ç–µ–∂ —É–∂–µ –±—ã–ª –∑–∞—á–∏—Å–ª–µ–Ω.", show_alert=True)
                    return
            
            
            async with db.execute("SELECT first_deposit_bonus_received FROM users WHERE user_id = ?", (user_id,)) as cursor:
                bonus_info = await cursor.fetchone()
            
            final_amount = amount
            bonus_message = ""
            if bonus_info and bonus_info[0] == 0:
                bonus_amount = amount 
                final_amount += bonus_amount
                bonus_message = f"\n\nüéÅ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å +{bonus_amount:.2f} USDT –∑–∞ –ø–µ—Ä–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!"
                await db.execute("UPDATE users SET first_deposit_bonus_received = 1 WHERE user_id = ?", (user_id,))
            

        await update_user_balance(user_id, final_amount, "deposit")
        try:
            async with aiosqlite.connect(CONFIG["DB_PATH"]) as db:
                await db.execute(
                    "UPDATE transactions SET status = 'completed', completed_at = ? WHERE external_id = ? AND user_id = ?",
                    (datetime.now().isoformat(), invoice_id, user_id)
                )
                await db.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
        
        await callback.message.edit_text(f"‚úÖ –ü–ª–∞—Ç–µ–∂ –Ω–∞ {amount} USDT —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω!{bonus_message}", reply_markup=get_main_menu_keyboard())
    else:
        await callback.answer("‚è≥ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª.", show_alert=True)
        
async def simulate_payment(invoice_id: str, user_id: int, amount: float):
    await asyncio.sleep(10)

    try:
        async with aiosqlite.connect(CONFIG["DB_PATH"]) as db:
            
            async with db.execute("SELECT first_deposit_bonus_received FROM users WHERE user_id = ?", (user_id,)) as cursor:
                bonus_info = await cursor.fetchone()

            final_amount = amount
            bonus_message = ""
            if bonus_info and bonus_info[0] == 0:
                bonus_amount = amount 
                final_amount += bonus_amount
                bonus_message = f"\nüéÅ –í–∞–º —Ç–∞–∫–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å +{bonus_amount:.2f} USDT –∑–∞ –ø–µ—Ä–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!"
                await db.execute("UPDATE users SET first_deposit_bonus_received = 1 WHERE user_id = ?", (user_id,))
            
            await update_user_balance(user_id, final_amount, "deposit")

            await db.execute(
                "UPDATE transactions SET status = 'completed', completed_at = ? WHERE external_id = ?",
                (datetime.now().isoformat(), invoice_id)
            )
            await db.commit()
        await bot.send_message(user_id, f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –Ω–∞ {amount} USDT –æ–±—Ä–∞–±–æ—Ç–∞–Ω!{bonus_message}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")


@router.callback_query(F.data == "withdraw")
async def withdraw_handler(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    balance = await get_user_balance(user_id)
    fee_percent = CONFIG["WITHDRAWAL_FEE"] * 100
    min_amount = CONFIG["MIN_WITHDRAWAL_AMOUNT"]

    withdraw_text = (
        f"üí∏ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤\n\n"
        f"–í–∞—à –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: **{balance['available']:.2f} USDT**\n\n"
        f"–ö–æ–º–∏—Å—Å–∏—è –∑–∞ –≤—ã–≤–æ–¥: **{fee_percent:.0f}%**\n"
        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: **{min_amount:.2f} USDT**\n\n"
        f"‚ö†Ô∏è –í—ã–≤–æ–¥ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –Ω–∞ –∫–æ—à–µ–ª—å–∫–∏ **USDT TRC-20**.\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        f"`—Å—É–º–º–∞ –∞–¥—Ä–µ—Å_–∫–æ—à–µ–ª—å–∫–∞`\n\n"
        f"**–ü—Ä–∏–º–µ—Ä:**\n`15.5 T...`"
    )

    await state.set_state(WithdrawalStates.entering_details)
    await callback.message.edit_text(
        withdraw_text,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
        ])
    )

@router.message(WithdrawalStates.entering_details)
async def process_withdrawal_details(message: Message, state: FSMContext):
    user_id = message.from_user.id
    parts = message.text.split()

    if len(parts) != 2:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫: `—Å—É–º–º–∞ –∞–¥—Ä–µ—Å`\n\n–ü—Ä–∏–º–µ—Ä: `15.5 T...`")
        return

    try:
        amount = float(parts[0])
        address = parts[1]
    except ValueError:
        await message.reply("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    if not (address.startswith("T") and 34 <= len(address) <= 42):
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞ USDT TRC-20. –û–Ω –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'T'.")
        return

    if amount < CONFIG["MIN_WITHDRAWAL_AMOUNT"]:
        await message.reply(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: {CONFIG['MIN_WITHDRAWAL_AMOUNT']:.2f} USDT.")
        return
    
    fee = amount * CONFIG["WITHDRAWAL_FEE"]
    total_to_deduct = amount + fee
    balance = await get_user_balance(user_id)

    if balance['available'] < total_to_deduct:
        await message.reply(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏.\n"
            f"–ù—É–∂–Ω–æ: {total_to_deduct:.2f} USDT (—Å—É–º–º–∞ {amount:.2f} + –∫–æ–º–∏—Å—Å–∏—è {fee:.2f})\n"
            f"–î–æ—Å—Ç—É–ø–Ω–æ: {balance['available']:.2f} USDT"
        )
        return

    if not await freeze_balance(user_id, total_to_deduct):
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –∑–∞–º–æ—Ä–æ–∑–∫–∏ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    try:
        async with aiosqlite.connect(CONFIG["DB_PATH"]) as db:
            cursor = await db.execute(
                "INSERT INTO withdrawal_requests (user_id, amount, fee, address, created_at, status) VALUES (?, ?, ?, ?, ?, 'pending')",
                (user_id, amount, fee, address, datetime.now().isoformat())
            )
            await db.commit()
            request_id = cursor.lastrowid

        
        await message.reply(
            f"‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ —Å–æ–∑–¥–∞–Ω!\n\n"
            f"ID –∑–∞—è–≤–∫–∏: **#{request_id}**\n"
            f"–°—É–º–º–∞: **{amount:.2f} USDT**\n"
            f"–ö–æ–º–∏—Å—Å–∏—è: **{fee:.2f} USDT**\n"
            f"–ê–¥—Ä–µ—Å: `{address}`\n\n"
            f"‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            parse_mode="Markdown"
        )
        
        safe_username = escape(message.from_user.username or "N/A")
        
        admin_text = (
            f"‚ùóÔ∏è –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥!\n\n"
            f"<b>ID –∑–∞—è–≤–∫–∏:</b> #{request_id}\n"
            f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <a href="tg://user?id={user_id}">@{safe_username}</a> (ID: <code>{user_id}</code>)\n'
            f"<b>–°—É–º–º–∞:</b> {amount:.2f} USDT\n"
            f"<b>–ê–¥—Ä–µ—Å:</b> <code>{address}</code>\n\n"
            f"–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: <code>/approve_withdrawal {request_id}</code>\n"
            f"–î–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: <code>/reject_withdrawal {request_id}</code>"
        )
        await bot.send_message(CONFIG["ADMIN_ID"], admin_text, parse_mode="HTML")
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥: {e}")
        await unfreeze_balance(user_id, total_to_deduct)
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞.")

async def _process_approve_withdrawal(request_id: int) -> str:
    async with aiosqlite.connect(CONFIG["DB_PATH"]) as db:
        async with db.execute("SELECT * FROM withdrawal_requests WHERE id = ?", (request_id,)) as cursor:
            request = await cursor.fetchone()

    if not request:
        return f"‚ùå –ó–∞–ø—Ä–æ—Å #{request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω."
    
    if request[5] != 'pending':
        return f"‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å #{request_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω (—Å—Ç–∞—Ç—É—Å: {request[5]})."

    user_id, amount, fee = request[1], request[2], request[3]
    total_deducted = amount + fee
    
    await unfreeze_balance(user_id, total_deducted)
    await update_user_balance(user_id, -total_deducted, "withdrawal")

    async with aiosqlite.connect(CONFIG["DB_PATH"]) as db:
        await db.execute(
            "UPDATE withdrawal_requests SET status = 'approved', processed_at = ? WHERE id = ?",
            (datetime.now().isoformat(), request_id)
        )
        await db.execute(
            "UPDATE user_balances SET total_withdrawn = total_withdrawn + ? WHERE user_id = ?",
            (amount, user_id)
        )
        await db.commit()
    
    try:
        await bot.send_message(user_id, f"‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ #{request_id} –Ω–∞ —Å—É–º–º—É {amount} USDT –±—ã–ª –æ–¥–æ–±—Ä–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É.")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –≤—ã–≤–æ–¥–∞: {e}")
        
    return f"‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ #{request_id} –Ω–∞ —Å—É–º–º—É {amount} USDT –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–¥–æ–±—Ä–µ–Ω."


async def _process_reject_withdrawal(request_id: int) -> str:
    async with aiosqlite.connect(CONFIG["DB_PATH"]) as db:
        async with db.execute("SELECT * FROM withdrawal_requests WHERE id = ?", (request_id,)) as cursor:
            request = await cursor.fetchone()

    if not request:
        return f"‚ùå –ó–∞–ø—Ä–æ—Å #{request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω."
    
    if request[5] != 'pending':
        return f"‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å #{request_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω (—Å—Ç–∞—Ç—É—Å: {request[5]})."

    user_id, amount, fee = request[1], request[2], request[3]
    total_to_unfreeze = amount + fee
    
    await unfreeze_balance(user_id, total_to_unfreeze)

    async with aiosqlite.connect(CONFIG["DB_PATH"]) as db:
        await db.execute(
            "UPDATE withdrawal_requests SET status = 'rejected', processed_at = ? WHERE id = ?",
            (datetime.now().isoformat(), request_id)
        )
        await db.commit()

    try:
        await bot.send_message(user_id, f"‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ #{request_id} –Ω–∞ —Å—É–º–º—É {amount} USDT –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω. –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –≤—ã–≤–æ–¥–∞: {e}")
        
    return f"‚ùå –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ #{request_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω. –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}."


async def is_admin(user_id: int) -> bool:
    return user_id == CONFIG["ADMIN_ID"]

@router.message(Command("approve_withdrawal"))

async def approve_withdrawal_command(message: Message):
    if not await is_admin(message.from_user.id): return

    args = message.text.split()
    if len(args) != 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /approve_withdrawal <ID>")
        return
    
    try:
        request_id = int(args[1])
        response_text = await _process_approve_withdrawal(request_id)
        await message.reply(response_text)
    except ValueError:
        await message.reply("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        
    request_id = int(args[1])
    async with aiosqlite.connect(CONFIG["DB_PATH"]) as db:
        async with db.execute("SELECT * FROM withdrawal_requests WHERE id = ?", (request_id,)) as cursor:
            request = await cursor.fetchone()

    if not request:
        await message.reply(f"–ó–∞–ø—Ä–æ—Å #{request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    if request[5] != 'pending':
        await message.reply(f"–ó–∞–ø—Ä–æ—Å #{request_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω (—Å—Ç–∞—Ç—É—Å: {request[5]}).")
        return

    user_id, amount, fee = request[1], request[2], request[3]
    total_deducted = amount + fee

    
    await unfreeze_balance(user_id, total_deducted)
    await update_user_balance(user_id, -total_deducted, "withdrawal")

    async with aiosqlite.connect(CONFIG["DB_PATH"]) as db:
        await db.execute(
            "UPDATE withdrawal_requests SET status = 'approved', processed_at = ? WHERE id = ?",
            (datetime.now().isoformat(), request_id)
        )
        await db.execute(
            "UPDATE user_balances SET total_withdrawn = total_withdrawn + ? WHERE user_id = ?",
            (amount, user_id)
        )
        await db.commit()

    await message.reply(f"‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ #{request_id} –Ω–∞ —Å—É–º–º—É {amount} USDT –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–¥–æ–±—Ä–µ–Ω.")
    try:
        await bot.send_message(user_id, f"‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ #{request_id} –Ω–∞ —Å—É–º–º—É {amount} USDT –±—ã–ª –æ–¥–æ–±—Ä–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É.")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –≤—ã–≤–æ–¥–∞: {e}")

@router.message(Command("reject_withdrawal"))
async def reject_withdrawal_command(message: Message):
    if not await is_admin(message.from_user.id): return

    args = message.text.split()
    if len(args) != 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /reject_withdrawal <ID>")
        return
        
    try:
        request_id = int(args[1])
        response_text = await _process_reject_withdrawal(request_id)
        await message.reply(response_text)
    except ValueError:
        await message.reply("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        
    request_id = int(args[1])
    async with aiosqlite.connect(CONFIG["DB_PATH"]) as db:
        async with db.execute("SELECT * FROM withdrawal_requests WHERE id = ?", (request_id,)) as cursor:
            request = await cursor.fetchone()

    if not request:
        await message.reply(f"–ó–∞–ø—Ä–æ—Å #{request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    if request[5] != 'pending':
        await message.reply(f"–ó–∞–ø—Ä–æ—Å #{request_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω (—Å—Ç–∞—Ç—É—Å: {request[5]}).")
        return

    user_id, amount, fee = request[1], request[2], request[3]
    total_to_unfreeze = amount + fee
    
    await unfreeze_balance(user_id, total_to_unfreeze)

    async with aiosqlite.connect(CONFIG["DB_PATH"]) as db:
        await db.execute(
            "UPDATE withdrawal_requests SET status = 'rejected', processed_at = ? WHERE id = ?",
            (datetime.now().isoformat(), request_id)
        )
        await db.commit()

    await message.reply(f"‚ùå –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ #{request_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω. –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
    try:
        await bot.send_message(user_id, f"‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ #{request_id} –Ω–∞ —Å—É–º–º—É {amount} USDT –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω. –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –≤—ã–≤–æ–¥–∞: {e}")



@router.callback_query(F.data == "back_to_menu")
async def back_to_menu_handler(callback: CallbackQuery, state: FSMContext):
    await state.clear()

    
    menu_text = "üé≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    
    happy_hour_active, multiplier = is_happy_hour()
    if happy_hour_active:
        bonus_percent = int((multiplier - 1) * 100)
        happy_hour_message = f"üéâ **–°–µ–π—á–∞—Å Happy Hour! –í—Å–µ –≤—ã–∏–≥—Ä—ã—à–∏ +{bonus_percent}%!**\n\n"
        
        menu_text = happy_hour_message + menu_text
        
    
    await callback.message.edit_text(
        menu_text, 
        reply_markup=get_main_menu_keyboard(), 
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "back_to_games")
async def back_to_games_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(BetCreation.choosing_game)
    await callback.message.edit_text("üéÆ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–≥—Ä—ã:", reply_markup=get_game_selection_keyboard())


@router.callback_query(F.data == "custom_bet_amount")
async def custom_bet_amount_handler(callback: CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state == PVE_BetCreation.choosing_amount:
        await pve_custom_bet_amount_handler(callback, state)
        return

    await state.set_state(BetStates.entering_custom_bet_amount)
    amount_text = (
        f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏\n\n"
        f"–õ–∏–º–∏—Ç—ã: –æ—Ç {CONFIG['MIN_BET_AMOUNT']:.1f} –¥–æ {CONFIG['MAX_BET_AMOUNT']:.1f} USDT."
    )
    await callback.message.edit_text(amount_text, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="back_to_bet_amounts")]
    ]))


@router.callback_query(F.data == "custom_deposit_amount")
async def custom_deposit_amount_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(DepositStates.entering_custom_amount)
    amount_text = (
        f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ USDT\n\n"
        f"–õ–∏–º–∏—Ç—ã: –æ—Ç {CONFIG['MIN_BET_AMOUNT']:.1f} –¥–æ {CONFIG['MAX_BET_AMOUNT']:.1f}."
    )
    await callback.message.edit_text(amount_text, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="back_to_deposit_amounts")]
    ]))

@router.message(BetStates.entering_custom_bet_amount)
async def process_custom_bet_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text)
        if not (CONFIG['MIN_BET_AMOUNT'] <= amount <= CONFIG['MAX_BET_AMOUNT']):
            await message.reply(f"‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–∂–¥—É {CONFIG['MIN_BET_AMOUNT']:.1f} –∏ {CONFIG['MAX_BET_AMOUNT']:.1f} USDT.")
            return

        
        callback_data = f"amount_{amount}"
        fake_callback = CallbackQuery(
            id=str(message.message_id), from_user=message.from_user,
            chat_instance="-1", message=message, data=callback_data
        )
        
        parent_state_data = await state.get_data()
        await state.clear()
        
        await state.set_state(BetCreation.choosing_amount)
        await state.set_data(parent_state_data)
        
        await amount_selection_handler(fake_callback, state)
        
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    except Exception as e:
        logger.error(f"Error in process_custom_bet_amount: {e}")



@router.message(DepositStates.entering_custom_amount)
async def process_custom_deposit_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text)
        
        if amount < CONFIG['MIN_BET_AMOUNT']:
            await message.answer(f"‚ùå –°—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞! –ú–∏–Ω–∏–º—É–º: {CONFIG['MIN_BET_AMOUNT']:.1f} USDT")
            return
        
        callback_data = f"deposit_{amount}"
        fake_callback = CallbackQuery(
            id=str(message.message_id), from_user=message.from_user,
            chat_instance="-1", message=message, data=callback_data
        )

        parent_state_data = await state.get_data()
        await state.set_state(DepositStates.choosing_amount)
        await state.set_data(parent_state_data)

        await deposit_amount_handler(fake_callback, state)

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")


@router.callback_query(F.data == "back_to_bet_amounts")
async def back_to_bet_amounts_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(BetCreation.choosing_amount)
    await callback.message.edit_text(
        f"üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:",
        reply_markup=get_bet_amount_keyboard()
    )


@router.callback_query(F.data == "back_to_deposit_amounts")
async def back_to_deposit_amounts_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(DepositStates.choosing_amount)
    await callback.message.edit_text(
        "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
        reply_markup=get_deposit_amount_keyboard()
    )


@router.callback_query(F.data == "help")
async def help_handler(callback: CallbackQuery):
    help_text = """üé≤ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞

üéÆ –î–û–°–¢–£–ü–ù–´–ï –ò–ì–†–´:
‚Ä¢ üé≤ –ö–æ—Å—Ç–∏ - –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç –±–æ–ª—å—à–µ–µ —á–∏—Å–ª–æ (1-6)
‚Ä¢ ü™ô –û—Ä–µ–ª –∏ –†–µ—à–∫–∞ - –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é –∫–æ—Å—Ç–∏ (1-3 - –æ–¥–Ω–∞ —Å—Ç–æ—Ä–æ–Ω–∞, 4-6 - –¥—Ä—É–≥–∞—è)
‚Ä¢ ‚öΩ –§—É—Ç–±–æ–ª - –≥–æ–ª, –µ—Å–ª–∏ –≤—ã–ø–∞–ª–æ 4-6
‚Ä¢ üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª - –ø–æ–ø–∞–¥–∞–Ω–∏–µ, –µ—Å–ª–∏ –≤—ã–ø–∞–ª–æ 4-6
‚Ä¢ üéØ –î–∞—Ä—Ç—Å - –±–æ–ª—å—à–µ –æ—á–∫–æ–≤ –ø–æ–±–µ–∂–¥–∞–µ—Ç (1-6)
‚Ä¢ üé∞ –°–ª–æ—Ç—ã - —Å–æ–±–µ—Ä–∏—Ç–µ –≤—ã–∏–≥—Ä—ã—à–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∏–∑ —Ç—Ä–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤

üí∞ –ö–ê–ö –ò–ì–†–ê–¢–¨:
1. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ @CryptoBot (–¥–æ—Å—Ç—É–ø–Ω—ã USDT, TON, BTC).
2. –°–æ–∑–¥–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É (PvP –∏–ª–∏ PvE), –≤—ã–±—Ä–∞–≤ –∏–≥—Ä—É –∏ —Å—É–º–º—É.
3. –í PvP –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø—Ä–∏–Ω—è—Ç–∏—è —Å—Ç–∞–≤–∫–∏ –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–æ–º. –í PvE –∏–≥—Ä–∞ –Ω–∞—á–Ω–µ—Ç—Å—è —Å—Ä–∞–∑—É.
4. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ —á–µ—Å—Ç–Ω–æ.

üí∏ –í–´–í–û–î –°–†–ï–î–°–¢–í:
‚Ä¢ –í—ã–≤–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –ø—Ä–æ—Ñ–∏–ª–µ.
‚Ä¢ –°–µ—Ç—å: USDT TRC-20.
‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è –∑–∞ –≤—ã–≤–æ–¥: 6%.
‚Ä¢ –ó–∞–ø—Ä–æ—Å—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤—Ä—É—á–Ω—É—é."""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])
    
    await callback.message.edit_text(help_text, reply_markup=keyboard)



@router.callback_query(F.data == "spin_wheel")
async def spin_wheel_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    async with aiosqlite.connect(CONFIG["DB_PATH"]) as db:
        async with db.execute("SELECT last_wheel_spin FROM users WHERE user_id = ?", (user_id,)) as cursor:
            result = await cursor.fetchone()
            last_spin_str = result[0] if result else None

    time_now = datetime.now()
    if last_spin_str:
        last_spin_time = datetime.fromisoformat(last_spin_str)
        if time_now - last_spin_time < timedelta(hours=24):
            time_left = timedelta(hours=24) - (time_now - last_spin_time)
            hours, remainder = divmod(time_left.seconds, 3600)
            minutes, _ = divmod(remainder, 60)
            await callback.answer(f"–°–ª–µ–¥—É—é—â–µ–µ –≤—Ä–∞—â–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ {hours} —á. {minutes} –º–∏–Ω.", show_alert=True)
            return

    await callback.message.edit_text("üé° –í—Ä–∞—â–∞–µ–º –∫–æ–ª–µ—Å–æ —É–¥–∞—á–∏...")
    await asyncio.sleep(2)

    win_amount = round(random.uniform(0.5, 10.0), 2)
    
    await update_user_balance(user_id, win_amount, "wheel_of_fortune")

    async with aiosqlite.connect(CONFIG["DB_PATH"]) as db:
        await db.execute("UPDATE users SET last_wheel_spin = ? WHERE user_id = ?", (time_now.isoformat(), user_id))
        await db.commit()

    await callback.message.edit_text(
        f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –≤—ã–∏–≥—Ä—ã—à –≤ –ö–æ–ª–µ—Å–µ –£–¥–∞—á–∏ —Å–æ—Å—Ç–∞–≤–∏–ª **{win_amount} USDT**!",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]])
    )
    await callback.answer()


@router.callback_query(F.data == "referral_link")
async def referral_link_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    bot_info = await bot.get_me()
    bot_username = bot_info.username
    
    referral_link = f"https://t.me/{bot_username}?start=ref_{user_id}"
    
    text = (
        f"ü§ù –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n\n"
        f"<code>{referral_link}</code>\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º! –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–π —Å—ã–≥—Ä–∞–µ—Ç 20 –∏–≥—Ä, –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å 10% –æ—Ç —Å—É–º–º—ã –µ–≥–æ —Å—Ç–∞–≤–∫–∏."
    )
    
    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ])
    )
    await callback.answer()


@router.callback_query(F.data == "enter_promo")
async def enter_promo_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(PromoStates.entering_code)
    await callback.message.edit_text(
        "üéüÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ])
    )

@router.message(PromoStates.entering_code)
async def process_promo_code(message: Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    code_text = message.text.upper().strip()

    async with aiosqlite.connect(CONFIG["DB_PATH"]) as db:
        
        async with db.execute("SELECT id, type, value, max_uses, uses FROM promo_codes WHERE code = ?", (code_text,)) as cursor:
            promo = await cursor.fetchone()

        if not promo:
            await message.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.", reply_markup=get_main_menu_keyboard())
            return
            
        promo_id, promo_type, value, max_uses, uses = promo

        if uses >= max_uses:
            await message.answer("‚ùå –≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑.", reply_markup=get_main_menu_keyboard())
            return

        
        async with db.execute("SELECT promo_id FROM used_promo_codes WHERE user_id = ? AND promo_id = ?", (user_id, promo_id)) as cursor:
            if await cursor.fetchone():
                await message.answer("‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥.", reply_markup=get_main_menu_keyboard())
                return

        
        if promo_type == 'balance':
            await update_user_balance(user_id, value, f"promo_{code_text}")
            await message.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {value:.2f} USDT.", reply_markup=get_main_menu_keyboard())
        elif promo_type == 'wallet':
            await update_user_balance(user_id, value, f"promo_{code_text}")
            await message.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ –±–æ–Ω—É—Å –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {value:.2f} USDT.", reply_markup=get_main_menu_keyboard())
        else:
            await message.answer("ü§î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", reply_markup=get_main_menu_keyboard())
            return

        await db.execute("UPDATE promo_codes SET uses = uses + 1 WHERE id = ?", (promo_id,))
        await db.execute("INSERT INTO used_promo_codes (user_id, promo_id) VALUES (?, ?)", (user_id, promo_id))
        await db.commit()

@router.callback_query(F.data == "daily_bonus")
async def daily_bonus_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    async with aiosqlite.connect(CONFIG["DB_PATH"]) as db:
        async with db.execute("SELECT last_bonus_claim FROM users WHERE user_id = ?", (user_id,)) as cursor:
            last_claim_str = (await cursor.fetchone())[0]

    time_now = datetime.now()
    if last_claim_str:
        last_claim_time = datetime.fromisoformat(last_claim_str)
        time_passed = time_now - last_claim_time
        if time_passed < timedelta(hours=24):
            time_left = timedelta(hours=24) - time_passed
            hours, remainder = divmod(time_left.seconds, 3600)
            minutes, _ = divmod(remainder, 60)
            await callback.answer(f"–í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å —á–µ—Ä–µ–∑ {hours} —á. {minutes} –º–∏–Ω.", show_alert=True)
            return

    bonus_amount = round(random.uniform(0.1, 0.5), 2)
    await update_user_balance(user_id, bonus_amount, "daily_bonus")

    async with aiosqlite.connect(CONFIG["DB_PATH"]) as db:
        await db.execute("UPDATE users SET last_bonus_claim = ? WHERE user_id = ?", (time_now.isoformat(), user_id))
        await db.commit()

    await callback.answer(f"üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –≤ —Ä–∞–∑–º–µ—Ä–µ {bonus_amount} USDT!", show_alert=True)


@router.callback_query(F.data == "support")
async def support_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(SupportStates.writing_ticket)
    await callback.message.edit_text(
        "üì® –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –û–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ])
    )

@router.message(SupportStates.writing_ticket)
async def process_ticket_message(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or "N/A"
    ticket_text = message.text

    async with aiosqlite.connect(CONFIG["DB_PATH"]) as db:
        cursor = await db.execute(
            "INSERT INTO tickets (user_id, username, message, created_at) VALUES (?, ?, ?, ?)",
            (user_id, username, ticket_text, datetime.now().isoformat())
        )
        await db.commit()
        ticket_id = cursor.lastrowid
    
    await message.reply(f"‚úÖ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ #{ticket_id} –ø—Ä–∏–Ω—è—Ç–æ! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è.")
    
    
    admin_text = (
        f"‚ÄºÔ∏è –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!\n\n"
        f"<b>–¢–∏–∫–µ—Ç ID:</b> #{ticket_id}\n"
        f"<b>–û—Ç:</b> @{username} (<code>{user_id}</code>)\n"
        f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{escape(ticket_text)}"
    )
    await bot.send_message(CONFIG["ADMIN_ID"], admin_text, parse_mode="HTML")
    await state.clear()


@router.message(Command("admin"))
async def admin_command(message: Message):
    if not await is_admin(message.from_user.id):
        return
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", reply_markup=get_admin_keyboard())



@router.callback_query(F.data == "admin_stats")
async def admin_stats_handler(callback: CallbackQuery):
    if not await is_admin(callback.from_user.id): return
    async with aiosqlite.connect(CONFIG["DB_PATH"]) as db:
        async with db.execute("SELECT user_id, username, registration_date FROM users") as cursor:
            users = await cursor.fetchall()
    
    text = f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n\n"
    user_list = "\n".join([f"ID: <code>{user[0]}</code>, @{user[1]}, –†–µ–≥: {user[2][:10]}" for user in users[:20]])
    text += user_list
    await callback.message.edit_text(text, parse_mode="HTML")
    await callback.answer()



@router.callback_query(F.data.in_({
    "admin_user_info", "admin_freeze_user", "admin_zero_user", "admin_unfreeze_user",
    "admin_approve_withdrawal", "admin_reject_withdrawal", "admin_reply_ticket"
}))
async def admin_prompt_for_id(callback: CallbackQuery, state: FSMContext):
    if not await is_admin(callback.from_user.id): return
    
    actions = {
        "admin_user_info": (AdminStates.entering_user_id_for_info, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"),
        "admin_freeze_user": (AdminStates.entering_user_id_for_freeze, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–∞–º–æ—Ä–æ–∑–∫–∏ –±–∞–ª–∞–Ω—Å–∞:"),
        "admin_zero_user": (AdminStates.entering_user_id_for_zero, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±–Ω—É–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:"),
        "admin_approve_withdrawal": (AdminStates.entering_withdrawal_id_for_approve, "–í–≤–µ–¥–∏—Ç–µ ID –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è:"),
        "admin_unfreeze_user": (AdminStates.entering_user_id_for_unfreeze, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–º–æ—Ä–æ–∑–∫–∏ –±–∞–ª–∞–Ω—Å–∞:"),
        "admin_reject_withdrawal": (AdminStates.entering_withdrawal_id_for_reject, "–í–≤–µ–¥–∏—Ç–µ ID –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:"),
        "admin_reply_ticket": (AdminStates.entering_ticket_id_for_reply, "–í–≤–µ–¥–∏—Ç–µ ID —Ç–∏–∫–µ—Ç–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞:")
    }
    
    action = actions[callback.data]
    await state.set_state(action[0])
    await callback.message.edit_text(action[1])
    await callback.answer()



@router.message(AdminStates.entering_user_id_for_info)
async def admin_get_user_info(message: Message, state: FSMContext):
    if not await is_admin(message.from_user.id): return
    try:
        
        user_id = int(message.text.strip()) 
        stats = await get_user_stats(user_id)
        if not stats:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear() 
            return

        info_text = (
            f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ <code>{user_id}</code>\n"
            f"<b>–ù–∏–∫:</b> {stats['nickname']}\n"
            f"<b>–Æ–∑–µ—Ä–Ω–µ–π–º:</b> @{stats['username'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"<b>–ë–∞–ª–∞–Ω—Å:</b> {stats['balance']:.2f} USDT\n"
            f"<b>–ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ:</b> {stats['frozen_balance']:.2f} USDT\n"
            f"<b>–í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫:</b> {stats['total_bets']}\n"
            f"<b>–ü–æ–±–µ–¥:</b> {stats['total_wins']}\n"
        )
        await message.answer(info_text, parse_mode="HTML")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.")
    finally:
        await state.clear()

@router.message(AdminStates.entering_user_id_for_zero)
async def admin_zero_user_balance(message: Message, state: FSMContext):
    if not await is_admin(message.from_user.id): return
    try:
        user_id = int(message.text)
        async with aiosqlite.connect(CONFIG["DB_PATH"]) as db:
            await db.execute("UPDATE user_balances SET balance = 0, frozen_balance = 0 WHERE user_id = ?", (user_id,))
            await db.commit()
        await message.answer(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id}</code> –æ–±–Ω—É–ª–µ–Ω.", parse_mode="HTML")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID.")
    finally:
        await state.clear()

@router.message(AdminStates.entering_user_id_for_freeze)
async def admin_freeze_user_balance(message: Message, state: FSMContext):
    if not await is_admin(message.from_user.id): return
    try:
        user_id = int(message.text)
        balance_info = await get_user_balance(user_id)
        await freeze_balance(user_id, balance_info['available'])
        await message.answer(f"–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id}</code> ({balance_info['available']:.2f} USDT) –∑–∞–º–æ—Ä–æ–∂–µ–Ω.", parse_mode="HTML")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID.")
    finally:
        await state.clear()

@router.message(AdminStates.entering_user_id_for_unfreeze)
async def admin_unfreeze_user_balance(message: Message, state: FSMContext):
    if not await is_admin(message.from_user.id): return
    try:
        user_id = int(message.text)
        balance_info = await get_user_balance(user_id)
        frozen_amount = balance_info.get('frozen', 0.0)
        
        if frozen_amount > 0:
            await unfreeze_balance(user_id, frozen_amount)
            await message.answer(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id}</code> —Ä–∞–∑–º–æ—Ä–æ–∂–µ–Ω –Ω–∞ —Å—É–º–º—É {frozen_amount:.2f} USDT.", parse_mode="HTML")
        else:
            await message.answer(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id}</code> –Ω–µ—Ç –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤.", parse_mode="HTML")
            
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID.")
    finally:
        await state.clear()

@router.message(AdminStates.entering_withdrawal_id_for_approve)
async def admin_process_approve_from_panel(message: Message, state: FSMContext):
    if not await is_admin(message.from_user.id): return
    try:
        request_id = int(message.text)
        response_text = await _process_approve_withdrawal(request_id)
        await message.answer(response_text)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.")
    finally:
        await state.clear()


@router.message(AdminStates.entering_withdrawal_id_for_reject)
async def admin_process_reject_from_panel(message: Message, state: FSMContext):
    if not await is_admin(message.from_user.id): return
    try:
        request_id = int(message.text)
        response_text = await _process_reject_withdrawal(request_id)
        await message.answer(response_text)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.")
    finally:
        await state.clear()
        
@router.callback_query(F.data == "admin_view_tickets")
async def admin_view_tickets_handler(callback: CallbackQuery):
    if not await is_admin(callback.from_user.id): return
    async with aiosqlite.connect(CONFIG["DB_PATH"]) as db:
        async with db.execute("SELECT id, user_id, username, message FROM tickets WHERE status = 'open' LIMIT 10") as cursor:
            tickets = await cursor.fetchall()
    
    if not tickets:
        await callback.answer("–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.", show_alert=True)
        return
        
    text = "üé´ –û—Ç–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã:\n\n"
    for ticket in tickets:
        text += f"<b>ID:</b> {ticket[0]}, <b>–û—Ç:</b> @{ticket[2]} (<code>{ticket[1]}</code>)\n"
        text += f"<i>–°–æ–æ–±—â–µ–Ω–∏–µ:</i> {escape(ticket[3][:100])}...\n---\n"
    
    await callback.message.edit_text(text, parse_mode="HTML")

@router.message(AdminStates.entering_ticket_id_for_reply)
async def admin_enter_ticket_reply_text(message: Message, state: FSMContext):
    if not await is_admin(message.from_user.id): return
    try:
        ticket_id = int(message.text)
        
        await state.update_data(ticket_id=ticket_id)
        await state.set_state(AdminStates.writing_reply_to_ticket)
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ç–∏–∫–µ—Ç–∞ #{ticket_id}:")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç–∏–∫–µ—Ç–∞.")
        await state.clear()

@router.message(AdminStates.writing_reply_to_ticket)
async def admin_send_reply_to_user(message: Message, state: FSMContext):
    if not await is_admin(message.from_user.id): return
    data = await state.get_data()
    ticket_id = data.get("ticket_id")
    reply_text = message.text

    async with aiosqlite.connect(CONFIG["DB_PATH"]) as db:
        
        async with db.execute("SELECT user_id FROM tickets WHERE id = ?", (ticket_id,)) as cursor:
            result = await cursor.fetchone()
        
        if not result:
            await message.answer(f"–¢–∏–∫–µ—Ç #{ticket_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        user_id_to_reply = result[0]
        
        await db.execute("UPDATE tickets SET status = 'closed' WHERE id = ?", (ticket_id,))
        await db.commit()
    
    try:
        await bot.send_message(user_id_to_reply, f"üì® –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ –≤–∞—à–µ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—é #{ticket_id}:\n\n{reply_text}")
        await message.answer(f"‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #{ticket_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_to_reply}. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –û—à–∏–±–∫–∞: {e}")
    finally:
        await state.clear()



async def main():
    if CONFIG["BOT_TOKEN"] == "Your Token Here":
        logger.error("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω BOT_TOKEN!")
        return
    if CONFIG["ADMIN_ID"] == 0:
        logger.error("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ADMIN_ID!")
        return
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ GameBot...")
    await init_db()

    asyncio.create_task(run_periodic_tasks())

    
    if CONFIG.get("DROPBOX_REFRESH_TOKEN") and CONFIG.get("DROPBOX_APP_KEY"):
        logger.info("–ù–∞–π–¥–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Dropbox. –ó–∞–ø—É—Å–∫–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∏ –±—ç–∫–∞–ø—ã.")
        await sync_promo_codes_from_dropbox()
        asyncio.create_task(run_periodic_backups())
    else:
        logger.warning("–¢–æ–∫–µ–Ω Dropbox –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ë—ç–∫–∞–ø—ã –∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã.")
        
    commands = [
        BotCommand(command="start", description="üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
        BotCommand(command="bet", description="üéÆ –°–æ–∑–¥–∞—Ç—å —Å—Ç–∞–≤–∫—É –≤ –≥—Ä—É–ø–ø–µ"),
        BotCommand(command="profile", description="üìä –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
    ]
    admin_commands = [
        BotCommand(command="approve_withdrawal", description="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –≤—ã–≤–æ–¥"),
        BotCommand(command="reject_withdrawal", description="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—ã–≤–æ–¥")
    ]
    await bot.set_my_commands(commands)
    await bot.set_my_commands(admin_commands, scope=BotCommandScopeChat(chat_id=CONFIG["ADMIN_ID"]))
    
    if crypto_api.test_mode:
        logger.warning("‚ö†Ô∏è –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ –¢–ï–°–¢–û–í–û–ú –†–ï–ñ–ò–ú–ï")
    else:
        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å CryptoBot API")
    
    logger.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
